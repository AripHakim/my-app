// app/index.js
import React, { useState } from 'react';
import { View, Text, Button, FlatList, TouchableOpacity } from 'react-native';
import * as DocumentPicker from 'expo-document-picker';
import * as FileSystem from 'expo-file-system';
import { useRouter } from 'expo-router';
// import DocumentPicker from 'react-native-document-picker';

const PlagiarismDetector = () => {
    const [files, setFiles] = useState<{ name: string | null; uri: string }[]>([]);
    const [error, setError] = useState('');
    const router = useRouter();

    const pickDocuments = async () => {
    try {
        const result = await DocumentPicker.getDocumentAsync({
            type: 'application/pdf',
        });

        // ✅ Periksa jika pengguna membatalkan pemilihan
        if (result.canceled || !result.assets || result.assets.length === 0) {
            return;
        }

        const file = result.assets[0]; // ✅ Ambil file yang dipilih

        // ✅ Pastikan file tidak duplikat sebelum ditambahkan
        if (!files.some(existingFile => existingFile.uri === file.uri)) {
            setFiles(prevFiles => [...prevFiles, { name: file.name || 'Unnamed', uri: file.uri }]);
        } else {
            setError('File sudah dipilih sebelumnya.');
        }
    } catch (err) {
        setError('Gagal memilih dokumen.');
    }
};


    const removeFile = (index: number) => {
        setFiles(files.filter((_, i) => i !== index));
    };

    const extractTextFromPDF = async (fileUri) => {
        try {
            const fileContent = await FileSystem.readAsStringAsync(fileUri, { encoding: FileSystem.EncodingType.Base64 });
            return fileContent;
        } catch (err) {
            setError('Gagal membaca file PDF.');
            return '';
        }
    };

    const handleSubmit = async () => {
        setError('');
        if (files.length < 2) {
            setError('Mohon unggah setidaknya 2 file PDF.');
            return;
        }
        try {
            const extractedTexts = await Promise.all(files.map(file => extractTextFromPDF(file.uri)));
            const response = await fetch('https://winnowing.up.railway.app/plagiarism', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    documents: extractedTexts,
                    k: 5,
                    window_size: 4,
                }),
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            router.push({ pathname: "/hasil", params: { result: JSON.stringify(data.similarities) } });
        } catch (error) {
            setError('Terjadi kesalahan saat memproses file.');
        }
    };

    return (
        <View style={{ padding: 20 }}>
            <Button title="Pilih File PDF" onPress={pickDocuments} />
            {files.length > 0 && (
                <FlatList
                    data={files}
                    keyExtractor={(item, index) => index.toString()}
                    renderItem={({ item, index }) => (
                        <TouchableOpacity onPress={() => removeFile(index)}>
                            <Text style={{ color: 'blue', marginVertical: 5 }}>{item.name} (Tap ini untuk hapus)</Text>
                        </TouchableOpacity>
                    )}
                />
            )}
            <Button title="Cek Plagiasi" onPress={handleSubmit} disabled={files.length < 2} />
            {error ? <Text style={{ color: 'red', marginTop: 10 }}>{error}</Text> : null}
        </View>
    );
};

export default PlagiarismDetector;
